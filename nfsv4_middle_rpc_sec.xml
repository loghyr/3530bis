<!-- Copyright (C) The IETF Trust (2009-2014) -->
<!-- Copyright (C) The Internet Society (2010-2014) -->
<section anchor="sec:rpc_flavors" title="RPC and Security Flavor">
   
  <t>
    The NFSv4 protocol is a RPC
    application that uses RPC version 2 and the XDR
    as defined in <xref target="RFC5531" />
    and <xref target="RFC4506" />.  The RPCSEC_GSS security flavors as
    defined in version 1 (<xref target="RFC2203" />) and version 2
    (<xref target="RFC5403" />) MUST be implemented
    as the mechanism to deliver stronger security for the NFSv4
    protocol.  However, deployment of RPCSEC_GSS is optional.
  </t>

  <section title="Ports and Transports">

    <t>
      Historically, NFSv2 and NFSv3 servers have resided on
      port 2049.  The registered port 2049 <xref target="RFC3232" /> for the NFS protocol
      SHOULD be the default configuration.  Using the registered port
      for NFS services means the NFS client will not need to use the RPC
      binding protocols as described in <xref target="RFC1833" />; this
      will allow NFS to transit firewalls.
    </t>

    <t>
      Where an NFSv4 implementation supports operation over the IP network
      protocol, the supported transport layer between NFS and IP MUST be an IETF
      standardised transport protocol that is specified to avoid network 
      congestion; such  transports include TCP and SCTP.
      To enhance the possibilities for
      interoperability, an NFSv4 implementation MUST support
      operation over the TCP transport protocol, at least until such time
      as a standards track RFC revises this requirement to use a different
      IETF standardised transport protocol with appropriate congestion control.
    </t>

    <t>
      If TCP is used as the transport, the client and server SHOULD use
      persistent connections.  This will prevent the weakening of TCP's
      congestion control via short lived connections and will improve
      performance for the Wide Area Network (WAN) environment by eliminating the need for
      SYN handshakes.
    </t>

    <t>
      To date, all NFSv4 implementations are TCP based, i.e., there are
      none for SCTP nor UDP. UDP by itself is not sufficient as a
      transport for NFSv4, neither is UDP in combination with some other
      mechanism (e.g., DCCP <xref target="RFC4340" />, NORM <xref target="RFC5740" />).
    </t>

    <t>
      As noted in <xref target="sec:security" />,
      the authentication model for NFSv4 has moved from
      machine-based to principal-based.  However, this modification
      of the authentication model does not
      imply a technical requirement to move the TCP connection management
      model from whole machine-based to one based on a per user model.
      In particular, NFS over TCP client implementations have traditionally
      multiplexed traffic for multiple users over a common TCP connection
      between an NFS client and server.  This has been true, regardless of
      whether the NFS client is using AUTH_SYS, AUTH_DH, RPCSEC_GSS or
      any other flavor.  Similarly, NFS over TCP server implementations
      have assumed such a model and thus scale the implementation of TCP
      connection management in proportion to the number of expected client
      machines.  It is intended that NFSv4 will not modify this
      connection management model.  NFSv4 clients that violate
      this assumption can expect scaling issues on the server and hence
      reduced service.
    </t>

    <section title="Client Retransmission Behavior">
      <t>
        When processing a NFSv4 request received over a reliable transport such as
        TCP, the NFSv4 server MUST NOT silently drop the request,
        except if the established transport connection has been broken.  Given such a
        contract between NFSv4 clients and servers, clients MUST NOT
        retry a request unless one or both of the following are true:

        <list style='symbols'>
          <t>
            The transport connection has been broken
          </t>

          <t>
            The procedure being retried is the NULL procedure
          </t>
        </list>
      </t>

      <t>
        Since reliable transports, such as TCP, do not always synchronously
        inform a peer when the other peer has broken the connection (for
        example, when an NFS server reboots), the NFSv4 client may
        want to actively "probe" the connection to see if has been broken.
        Use of the NULL procedure is one recommended way to do so.  So, when
        a client experiences a remote procedure call timeout (of some
        arbitrary implementation specific amount), rather than retrying the
        remote procedure call, it could instead issue a NULL procedure call
        to the server.  If the server has died, the transport connection
        break will eventually be indicated to the NFSv4 client.
        The client can then reconnect, and then retry the original request.
        If the NULL procedure call gets a response, the connection has
        not broken.  The client can decide to wait longer for the original
        request's response, or it can break the transport connection and
        reconnect before re-sending the original request.
      </t>

      <t>
        For callbacks from the server to the client, the same rules apply,
        but the server doing the callback becomes the client, and the client
        receiving the callback becomes the server.
      </t>
    </section>
  </section>

  <section title="Security Flavors">

    <t>
      Traditional RPC implementations have included AUTH_NONE, AUTH_SYS,
      AUTH_DH, and AUTH_KRB4 as security flavors.  With
      <xref target="RFC2203" /> an additional security flavor of RPCSEC_GSS
      has been introduced which uses the functionality of GSS-API
      <xref target="RFC2743" />.  This allows for the
      use of various security mechanisms by the RPC layer without the
      additional implementation overhead of adding RPC security flavors.
      For NFSv4, the RPCSEC_GSS security flavor MUST be used to
      enable the mandatory security mechanism.  Other flavors, such as,
      AUTH_NONE, AUTH_SYS, and AUTH_DH MAY be implemented as well.
    </t>

    <section title="Security mechanisms for NFSv4">

      <t>
        RPCSEC_GSS, via GSS-API, supports multiple mechanisms that provide
        security services.  For interoperability, NFSv4 clients and servers
        MUST support the Kerberos V5 security mechanism.
      </t>

      <t>
        The use of RPCSEC_GSS requires selection of mechanism, quality of
        protection (QOP), and service (authentication, integrity, privacy).
        For the mandated security mechanisms, NFSv4 specifies that a QOP of
        zero is used, leaving it up to the mechanism or the mechanism's
        configuration to map QOP zero to an appropriate level of protection.
        Each mandated mechanism specifies a minimum set of cryptographic
        algorithms for implementing integrity and privacy.  NFSv4 clients
        and servers MUST be implemented on operating environments that comply
        with the REQUIRED cryptographic algorithms of each REQUIRED
        mechanism.
      </t>

      <section anchor="krb5:sectrip" title="Kerberos V5 as a Security Triple">
        <t>
          The Kerberos V5 GSS-API mechanism as described in <xref target="RFC4121" /> MUST be
          implemented with the RPCSEC_GSS services as specified in the
          following table:
        </t>

        <t>
          <figure>
            <artwork>
   column descriptions:
   1 == number of pseudo flavor
   2 == name of pseudo flavor
   3 == mechanism's OID
   4 == RPCSEC_GSS service
   5 == NFSv4 clients MUST support
   6 == NFSv4 servers MUST support

   1      2        3                    4                     5   6
   ------------------------------------------------------------------
   390003 krb5     1.2.840.113554.1.2.2 rpc_gss_svc_none      yes yes
   390004 krb5i    1.2.840.113554.1.2.2 rpc_gss_svc_integrity yes yes
   390005 krb5p    1.2.840.113554.1.2.2 rpc_gss_svc_privacy    no yes
            </artwork>
          </figure>
        </t>

        <t>
          Note that the pseudo flavor is presented here as a mapping aid to the
          implementor.  Because this NFS protocol includes a method to negotiate
          security and it understands the GSS-API mechanism, the pseudo flavor
          is not needed.  The pseudo flavor is needed for NFSv3 since
          the security negotiation is done via the MOUNT protocol as described
          in <xref target="RFC2623" />.
        </t>

        <t>
          At the time this document was specified, the Advanced Encryption Standard
          (AES) with HMAC-SHA1 was a REQUIRED algorithm set for Kerberos V5.
          In contrast, when NFSv4.0 was first specified in
          <xref target="RFC3530" />, weaker algorithm sets were
          REQUIRED for Kerberos V5, and were REQUIRED in the NFSv4.0
          specification, because the Kerberos V5 specification at the time did
          not specify stronger algorithms.  The NFSv4 specification does not
          specify REQUIRED algorithms for Kerberos V5, and instead, the
          implementor is expected to track the evolution of the Kerberos V5
          standard if and when stronger algorithms are specified.
        </t>

        <section toc='exclude' anchor="ss:core_infrastructure:SCfCAiKV" title="Security Considerations for Cryptographic Algorithms in Kerberos V5">
          <t>
            When deploying NFSv4, the strength of the security achieved depends
            on the existing Kerberos V5 infrastructure.  The algorithms of
            Kerberos V5 are not directly exposed to or selectable by the client
            or server, so there is some due diligence required by the user of
            NFSv4 to ensure that security is acceptable where needed. Guidance
            is provided in <xref target="RFC6649" /> as to why weak algorithms
            should be disabled by default.
          </t>
        </section>

      </section>
    </section>
  </section>

  <section title="Security Negotiation">
    <t>
      With the NFSv4 server potentially offering multiple security
      mechanisms, the client needs a method to determine or negotiate
      which mechanism is to be used for its communication with the server.
      The NFS server may have multiple points within its file system name
      space that are available for use by NFS clients.  In turn the NFS
      server may be configured such that each of these entry points may
      have different or multiple security mechanisms in use.
    </t>

    <t>
      The security negotiation between client and server SHOULD be done
      with a secure channel to eliminate the possibility of a third party
      intercepting the negotiation sequence and forcing the client and
      server to choose a lower level of security than required or desired.
      See <xref target="sec:security" /> for further discussion.
    </t>

    <section title="SECINFO">
      <t>
        The new SECINFO operation will allow the client to determine, on a per
        filehandle basis, what security triple (see <xref target='RFC2743' />) is to be used for server access.
        In general, the client will not have to use the SECINFO operation
        except during initial communication with the server or when the client
        crosses policy boundaries at the server.  It is possible that the
        server's policies change during the client's interaction therefore
        forcing the client to negotiate a new security triple.
      </t>
    </section>

    <section title="Security Error">

      <t>
        Based on the assumption that each NFSv4 client and server
        MUST support a minimum set of security (i.e.,
        Kerberos-V5 under RPCSEC_GSS), the NFS client will start its
        communication with the server with one of the minimal security triples.
        During communication with the server, the client may receive an NFS
        error of NFS4ERR_WRONGSEC.  This error allows the server to notify the
        client that the security triple currently being used is not appropriate
        for access to the server's file system resources.  The client is then
        responsible for determining what security triples are available at the
        server and choose one which is appropriate for the client.  See 
        <xref target="OP_SECINFO" /> for further discussion of how
        the client will respond to the NFS4ERR_WRONGSEC error and use SECINFO.
      </t>
    </section>

  <section title="Callback RPC Authentication">

      <t>
        Except as noted elsewhere in this section, the callback RPC (described
        later) MUST mutually authenticate the NFS server to the principal
        that acquired the client ID (also described later), using the security
        flavor the original SETCLIENTID operation used.
      </t>

      <t>
        For AUTH_NONE, there are no principals, so this is a non-issue.
      </t>

      <t>
        AUTH_SYS has no notions of mutual authentication or a server principal,
        so the callback from the server simply uses the AUTH_SYS credential
        that the user used when he set up the delegation.
      </t>
 
      <t>
        For AUTH_DH, one commonly used convention is that the server uses
        the credential corresponding to this AUTH_DH principal:

        <figure>
          <artwork>
  unix.host@domain
          </artwork>
        </figure>

        where host and domain are variables corresponding to the name of
        server host and directory services domain in which it lives such as
        a Network Information System domain or a DNS domain.
      </t>

      <t>
        Regardless of what security mechanism under RPCSEC_GSS is
        being used, the NFS server MUST identify itself in GSS-API via a
        GSS_C_NT_HOSTBASED_SERVICE name type.  GSS_C_NT_HOSTBASED_SERVICE names
        are of the form:

        <figure>
          <artwork>
  service@hostname
          </artwork>
        </figure>
      </t>

      <t>
        For NFS, the "service" element is

        <figure>
          <artwork>
  nfs
          </artwork>
        </figure>

        Implementations of security mechanisms will convert nfs@hostname to
        various different forms.  For Kerberos V5, the following
        form is RECOMMENDED:

        <figure>
          <artwork>
nfs/hostname
          </artwork>
        </figure>
      </t>

      <t>
        For Kerberos V5, nfs/hostname would be a server principal in
        the Kerberos Key Distribution Center database.  This is the same
        principal the client acquired a GSS-API context for when it issued
        the SETCLIENTID operation, therefore, the realm name for the
        server principal must be the same for the callback as it was for
        the SETCLIENTID.
      </t>

    </section>
  </section>
</section>
