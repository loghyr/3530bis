<!-- Copyright (C) The IETF Trust (2009-2014) -->
<!-- Copyright (C) The Internet Society (2010-2014) -->

<section anchor="sec:i18n" title="Internationalization">
  <section anchor="ss:i18n:intro" title="Introduction">
    <t>
      This section uses NFSv4.0 internationalization, as implemented by
      existing clients and servers, as the basis upon which NFSv4.0 clients
      may implement internationalization support.  This procedure, while
      necessary, may result in confusion if we do not clearly understand
      that we are mixing prescription and description, and why, in this
      particular case, this is a valid thing to do.
    </t>

    <t>
      This section is based on the behavior of existing implementations.
      Note that the behaviors described are each demonstrated by a
      combination of an NFSv4 server implementation proper and a
      server-side physical filesystem. It is common for servers and
      physical filesystems to be configurable as to the behavior
      shown once set up and each be configuration showing different
      behavior is considered separately, for our purposes.
    </t>

    <t>
      Note that in this section, the keywords "MUST", "SHOULD", and
      "MAY", retain their normal meanings.  However, in deriving
      this specification from implementation patterns, we document
      below how the normative terms used derive from the behavior
      of existing implementations, in those situations in which
      existing implementation behavior patterns can be determined.

      <list style='symbols'>
        <t>
          Behavior implemented by all existing clients or servers is described
          using "MUST", since new implementations need to follow existing
          ones to be assured of interoperability.  While it is possible that
          different behavior might be workable, we have found no case where
          this seems reasonable.
        </t>

        <t>
          Behavior implemented by no existing clients or servers is described
          using "MUST NOT", if such behavior poses interoperability problems.
        </t>

        <t>
          Behavior implemented by most existing clients or servers, where
          that behavior is more desirable than any alternative is described
          using "SHOULD", since new implementations need to follow that
          existing practice unless there are strong reasons to do otherwise.
          <vspace blankLines='1' />
          The converse holds for "SHOULD NOT".
        </t>

        <t>
          Behavior implemented by some not all existing clients or servers,
          is described using "MAY", indicating that new implementations have
          a choice as to whether they will behave in that way.  Thus, new
          implementations will have the same flexibility that existing ones
          do.
        </t>

        <t>
          Behavior implemented by all existing clients or servers, so far
          as is known, but where there remains some uncertainty as to details
          is described using "should".  Such cases primarily concern details
          of error returns.  New implementations should follow existing
          practice even though such situations generally do not affect
          interoperability.
        </t>
      </list>
    </t>

    <t>
      There are also cases in which certain server behaviors, while
      not known to exist, cannot be reliably determined not to
      exist.  In part, this is a consequence of the long period of
      time that has elapsed since the publication of <xref target='RFC3530' />,
      resulting in a situation in which those involved in the
      implementation may no longer be involved in or aware of working
      group activities.
    </t>

    <t>
      In the case of possible server behavior that is neither known
      to exist nor known not to exist, we use SHOULD NOT and MUST
      NOT as follows, and similarly for "SHOULD" and "MUST".

      <list style='symbols'>
        <t>
          In some cases, the potential behavior is not known to exist but is
          of such a nature that, if it were in fact implemented, interoperability
          difficulties would be expected and reported, giving us cause to
          conclude that the potential behavior is not implemented.  For such
          behavior, we use MUST NOT.  Similarly we use "MUST" to apply to the
          contrary behavior.
        </t>

        <t>
          In other cases, potential behavior is not known to exist but the
          behavior, while undesirable, is not of such a nature that we are
          able to draw any conclusions about its potential existence.  In
          such cases, we use SHOULD NOT. Similarly we use "SHOULD" to apply
          to the contrary behavior.
        </t>
      </list>
    </t>

    <t>
      In the case of a MAY, SHOULD, or SHOULD NOT that applies to
      servers, clients need to be aware that there are servers which
      may or may not take the specified action, and they need to
      be prepared for either eventuality.
    </t>
  </section>

  <section anchor="ss:i18n:limits" title="Limitations on internationalization-related processing in the NFSv4 context">
    <t>
      There are a number of noteworthy circumstances that limit the degree
      to which internationalization-related processing can be made universal
      with regard to NFSv4 clients and servers:

      <list style='symbols'>
        <t>
          The NFSv4 client is part of an extensive set of client-side software
          components whose design and internal interfaces are not within the
          IETFâ€™s purview, limiting the degree to which a particular character
          encoding may be made standard.
        </t>
        <t>
          Server-side handling of file component names is typically
          implemented within a server-side physical file system, whose
          handling of character encoding and normalization is not specifiable by the IETF.
        </t>
        <t>
          Typical implementation patterns in Unix systems result in the
          NFSv4 client having no knowledge of the character encoding being
          used, which may even vary between processes on the same client
          system.
        </t>
        <t>
          Users may need access to files stored previously with non-UTF-8
          encodings, or with UTF-8 encodings that do not match any particular normalization form.
        </t>
      </list>
    </t>
  </section>

  <section anchor="ss:i18n:servsum" title="Summary of Server Behavior Types">
    <t>
      As mentioned in <xref target='ss:i18n:types' />, servers MAY reject component name strings
      that are not valid UTF-8.  This leads to a number of types of valid
      server behavior as outlined below.  When these are combined with
      the valid normalization-related behaviors as described in <xref target='ss:i18n:encode' />,
      this leads to the combined behaviors outlined below.

      <list style='symbols'>
        <t>
	        Servers which limit file component names to UTF-8
	        strings exist with normalization-related
	        handling described in <xref target='ss:i18n:encode' />.  These are best described
	        as "UTF-8-only servers".
        </t>

        <t>
	        Servers which do not limit file component names to UTF-8
	        strings are very common and are necessary to deal with
	        clients/applications not oriented to the use of UTF-8.
	        Such servers ignore normalization-related issues and there
	        is no way for them to implement either normalization or
	        representation-independent lookups.  These are best
	        described as "UTF-8-unaware servers" since they treat
	        file component names as uninterpreted strings of bytes
	        and have no knowledge of the characters represented. Such
	        servers ignore normalization-related issues and there is
	        no way for them to implement either normalization or
	        representation-independent lookups.  See <xref target='ss:i18n:utf8_err' /> for
	        details.
        </t>

        <t>
	        It is possible for a server to allow component names which
	        are not valid UTF-8, while still being aware of the
	        structure of UTF-8 strings.  Such servers could implement
	        either normalization or representation-independent lookups,
	        but apply those techniques only to valid UTF-8 strings.
          Such servers are not common, but it is possible to configure at
          least one known server to have this behavior.  This behavior
          SHOULD NOT be used due to the possibility that a filename
          using one character set may, by coincidence, have the appearance
          of a UTF-8 filename; the results of UTF-8 normalization or
          representation-independent lookups are unlikely to be correct
          in all cases with respect to the other character set.
        </t>
      </list>
    </t>
  </section>

  <section anchor="ss:i18n:encode" title="String Encoding">
    <t>
      Strings that potentially contain non-ASCII Characters are generally
      represented in NFSv4 using the UTF-8 encoding of Unicode.  See
      <xref target='RFC2279' /> for precise encoding and decoding rules.
    </t>

    <t>
      Some details of the protocol treatment depend on the type of string:

      <list style='symbols'>
        <t>
          For strings which are component names, the preferred encoding for any
          non-ASCII characters is the UTF-8 representation of Unicode.
          <vspace blankLines='1' />

	        In many cases, clients have no knowledge of the encoding
	        being used, with the encoding done at user-level under
	        control of a per-process locale specification. As a result,
	        it may be impossible for the NFSv4 client to enforce use
	        of UTF-8. Use of non-UTF-8 encodings can be problematic
	        since it may interfere with access to files stored using
	        other forms of name encoding. Also, normalization-related
	        processing (see <xref target='ss:i18n:norms' />) of a string not encoded in
	        UTF-8 could result in inappropriate name modification or
	        aliasing. In cases in which one has a non-UT8-name that
	        accidentally conforms to UTF-8 rules, substitution of
	        canonically equivalent strings can change the non-UTF-8
	        encoded name drastically.
        </t>

        <t>
          For strings based on domain names, non-ASCII characters MUST be
          represented using the UTF-8 encoding of Unicode, and additional
          string format restrictions apply.
          See <xref target='ss:i18n:types' /> for details.
        </t>

        <t>
          The contents of symbolic links (of type linktext4 in the
          XDR) MUST be treated as opaque data by NFSv4 servers.
          Although UTF-8 encoding is often used, it need not be.
          In this respect, the contents of symbolic links are like
          the contents of regular files in that their encoding is
          not within the scope of this specification.
        </t>

        <t>
          For other sorts of strings, any non-ASCII characters SHOULD be
          represented using the UTF-8 encoding of Unicode.
        </t>
      </list>
    </t>
  </section>

  <section anchor="ss:i18n:norms" title="Normalization">
    <t>
      The client and server operating environments may differ in their
      policies and operational methods with respect to character
      normalization (See <xref target="UNICODE" /> for a discussion of normalization
      forms).  This difference may also exist between applications on the
      same client.  This adds to the difficulty of providing a single
      normalization policy for the protocol that allows for maximal
      interoperability.  This issue is similar to the character case issues
      where the server may or may not support case insensitive file name
      matching and may or may not preserve the character case when storing
      file names.  The protocol does not mandate a particular behavior but
      allows for a range of useful behaviors.
    </t>

    <t>
      The NFS version 4 protocol does not mandate the use of a particular
      normalization form at this time.  A subsequent minor version of
      the NFSv4 protocol might specify a particular normalization form.
      Therefore, the server and client can expect that they may receive
      unnormalized characters within protocol requests and responses.  If
      the operating environment requires normalization, then the
      implementation must normalize the various UTF-8 encoded strings
      within the protocol before presenting the information to an
      application (at the client) or local file system (at the server).
    </t>

    <t>
      Server implementations MAY normalize file names to conform
      to a particular normalization form before using the resulting
      string when looking up or creating a file.  Servers MAY also
      perform normalization-insensitive string comparisons without
      modifying name to match a particular normalization form.
      Except in cases in which component names are excluded from
      normalization-related handling because they are not valid
      UTF-8 strings, a server MUST make the same choice (as to
      whether to normalize or not, the target form of normalization
      and whether to do normalization-insensitive string comparisons)
      in the same way for all accesses to a particular filesystem.
      Servers MUST NOT reject a file name because it does not
      conform to a particular normalization form.
    </t>
  </section>

  <section anchor="ss:i18n:types" title="Types with Processing Defined by Other Internet Areas">
    <t>
      There are two types of strings that NFSv4 deals with that are based
      on domain names.  Processing of such strings is defined by other
      Internet standards, and hence the processing behavior for such
      strings should be consistent across all server operating systems
      and server file systems.
    </t>

    <t>
      These are as follows:

      <list style='symbols'>
        <t>
          Server names as they appear in the fs_locations attribute.  Note
          that for most purposes, such server names will only be sent by the
          server to the client.  The exception is use of the fs_locations
          attribute in a VERIFY or NVERIFY operation.
        </t>

        <t>
          Principal suffixes which are used to denote sets of users and
          groups, and are in the form of domain names.
        </t>
      </list>
    </t>

    <t>
      The general rules for handling all of these domain-related strings
      are similar and independent of the role of the sender or receiver as
      client or server although the consequences of failure to obey these
      rules may be different for client or server.  The server can report
      errors when it is sent invalid strings, whereas the client will
      simply ignore invalid string or use a default value in their place.
    </t>

    <t>
      The string sent SHOULD be in the form of an U-label although it MAY be
      in the form of an A-label or a UTF-8 domain name that is not a properly formatted U-label.
      The
      receiver needs to be able to accept domain and server names in any of
      the formats allowed.  The server MUST reject, using the error
      NFS4ERR_INVAL, a string which is not valid UTF-8 or which begins with
      "xn--" and violates the rules for a valid A-label.
    </t>

    <t>
      When a domain string is part of id@domain or group@domain, the server
      SHOULD map domain strings which are A-labels (see <xref target='RFC5890' />) or are UTF-8 domain
      names which are not U-labels, to the corresponding U-label, using
      ToUnicode(domain) or ToUnicode(ToASCII(domain)).  As a result, the
      domain name returned within a userid on a GETATTR may not match that
      sent when the userid is set using SETATTR, although when this
      happens, the domain will be in the form of an U-label.  When the
      server does not map domain strings which are not U-labels into a
      U-label, which it MAY do, it MUST NOT modify the domain, and the
      domain returned on a GETATTR of the userid MUST be the same as that
      used when setting the userid by the SETATTR.
    </t>

    <t>
      The server MAY implement VERIFY and NVERIFY without translating
      internal state to a string form, so that, for example, a user
      principal which represents a specific numeric user id, will match a
      different principal string which represents the same numeric user id.
    </t>
  </section>

  <section anchor="ss:i18n:utf8_err" title="UTF-8 Related Errors">
    <t>
      Where the client sends an invalid UTF-8 string, the server MAY
      return an NFS4ERR_INVAL error.  This includes cases in which
      inappropriate prefixes are detected and where the count includes
      trailing bytes that do not constitute a full UCS character.
    </t>

    <t>
      Requirements for server handling of component names which are not
      valid UTF-8, when a server does not return NFS4ERR_INVAL in response
      to receiving them, are described in <xref target='ss:i18n:nonvalid' />.
    </t>

    <t>
      Where the client supplied string is not rejected with
      NFS4ERR_INVAL but contains characters that are not supported
      by the server as a value for that string (e.g., names containing
      slashes, or characters that does not fit into 16 bits when
      converted from UTF-8 to a Unicode codepoint), the server
      should return an NFS4ERR_BADCHAR error.
    </t>

    <t>
      Where a UTF-8 string is used as a file name, and the file
      system, while supporting all of the characters within the
      name, does not allow that particular name to be used, the
      error should return the error NFS4ERR_BADNAME.  This includes
      such situations as file system prohibitions of "." and ".."
      as file names for certain operations, and similar constraints
    </t>
  </section>

  <section anchor="ss:i18n:nonvalid" title="Servers that accept file component names that are not valid UTF-8 strings">
    <t>
      As stated previously, servers MAY accept, on all or on some
      subset of the physical filesystems exported, component names
      that are not valid UTF-8 strings.  A typical pattern is for
      a server to use UTF-8-unaware physical filesystems that treat
      component names as uninterpreted strings of bytes, rather
      than having any awareness of the character set being used.
    </t>

    <t>
      Such servers SHOULD NOT change the stored representation of
      component names from those received on the wire, and SHOULD
      use binary comparison of component name strings to determine
      equivalence (as opposed to any broader notion of string
      comparison).  This is because the server has no knowledge of
      the character encoding being used.
    </t>

    <t>
      Nonetheless, when such a server uses a broader notion of
      string equivalence than recommended in the preceding paragraph
      the following considerations apply:

      <list style='symbols'>
        <t>
          Outside of 7-bit ASCII, string processing that changes string
          contents is usually specific to a character set and hence is
          generally unsafe when the character set is unknown.  This
          processing could change the filename in an unexpected fashion,
          rendering the file inaccessible to the application or client that
          created or renamed the file and to others expecting the original
          filename.  Hence, such processing should not be performed because
          doing so is likely to result in incorrect string modification or
          aliasing.
        </t>

        <t>
          Unicode normalization is particularly dangerous, as such
          processing assumes that the string is UTF-8.  When that assumption
          is false because a different character set was used to create the
          filename, normalization may corrupt the filename with respect to
          that character set, rendering the file inaccessible to the
          application that created it and others expecting the original
          filename.  Hence, Unicode normalization SHOULD NOT be performed,
          because it may cause incorrect string modification or aliasing.
        </t>
      </list>
    </t>
  </section>
</section>
