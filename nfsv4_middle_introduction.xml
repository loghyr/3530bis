<!-- Copyright (C) The IETF Trust (2009-2013) -->
<!-- Copyright (C) The Internet Society (2010-2013) -->
<section anchor="sec:intro" title="Introduction" >
  <section anchor="v4_goals" title="NFS Version 4 Goals">
    <t>
      The Network Filesystem version 4 (NFSv4) protocol is a further
      revision of the NFS protocol defined already by versions
      2 <xref target="RFC1094" /> and 3 <xref target="RFC1813" />.
      It retains the essential
      characteristics of previous versions: design for easy recovery,
      independent of transport protocols, operating systems and
      filesystems, simplicity, and good performance.  The NFSv4
      revision has the following goals:

      <list style='symbols'>
        <t>
          Improved access and good performance on the Internet.
        <vspace blankLines='1' />
          The protocol is designed to transit firewalls easily,
          perform well where latency is high and bandwidth is low,
          and scale to very large numbers of clients per server.
        </t>

        <t>
          Strong security with negotiation built into the protocol.
        <vspace blankLines='1' />
          The protocol builds on the work of the Open Network Computing
          (ONC) Remote Procedure Call (RPC) working group
          in supporting the RPCSEC_GSS protocol (see both <xref target="RFC2203" />
          and <xref target="RFC5403" />).  Additionally, the NFS
          version 4 protocol provides a mechanism to allow clients and
          servers the ability to negotiate security and require clients
          and servers to support a minimal set of security schemes.
        </t>

        <t>
          Good cross-platform interoperability.
        <vspace blankLines='1' />
          The protocol features a filesystem model that provides a
          useful, common set of features that does not unduly favor
          one filesystem or operating system over another.
        </t>

        <t>
          Designed for protocol extensions.
        <vspace blankLines='1' />
          The protocol is designed to accept standard extensions that
          do not compromise backward compatibility.
        </t>
      </list>
    </t>

    <t>
      This document, together with the companion XDR description
      document <xref target="I-D.ietf-nfsv4-rfc3530bis-dot-x" />,
      obsoletes RFC 3530 <xref target="RFC3530" />
      as the authoritative document describing NFSv4.  It does
      not introduce any over-the-wire protocol
      changes, in the sense that previously valid requests
      remain valid.  However, some requests previously defined as
      invalid, although not generally rejected, are now
      explicitly allowed, in that internationalization handling
      has been generalized and liberalized.
    </t>
  </section>

  <section anchor="document_incons"
           title="Inconsistencies of this Document with the companion document NFS Version 4 Protocol">
    <t>
      <xref target="I-D.ietf-nfsv4-rfc3530bis-dot-x" />, NFS Version 4
      Protocol, contains the definitions in XDR description language of
      the constructs used by the protocol.  Inside this document, several
      of the constructs are reproduced for purposes of explanation.  The
      reader is warned of the possibility of errors in the reproduced
      constructs outside of <xref target="I-D.ietf-nfsv4-rfc3530bis-dot-x" />.
      For any part of the document that is inconsistent with
      <xref target="I-D.ietf-nfsv4-rfc3530bis-dot-x" />,
      <xref target="I-D.ietf-nfsv4-rfc3530bis-dot-x" /> is to be
      considered authoritative.
    </t>
  </section>

  <section anchor="feature_overview" title="Overview of NFSv4 Features">
    <t>
      To provide a reasonable context for the reader, the major
      features of NFSv4 protocol will be reviewed in brief.
      This will be done to provide an appropriate context for both
      the reader who is familiar with the previous versions of the
      NFS protocol and the reader who is new to the NFS protocols.
      For the reader new to the NFS protocols, some fundamental
      knowledge is still expected.  The reader should
      be familiar with the XDR and RPC protocols as described in
      <xref target="RFC5531" /> and <xref target="RFC4506" />.
      A basic knowledge of filesystems and distributed filesystems
      is expected as well.
    </t>

    <section anchor="intro_rpc" title="RPC and Security">

      <t>
        As with previous versions of NFS, the External Data
        Representation (XDR) and RPC
        mechanisms used for the NFSv4 protocol are those
        defined in <xref target="RFC5531" /> and
        <xref target="RFC4506" />.  To meet end to end
        security requirements, the RPCSEC_GSS framework
        (both version 1 in <xref target="RFC2203" /> and
        version 2 in <xref target="RFC5403" />)
        will be used to extend the basic RPC security.  With the
        use of RPCSEC_GSS, various mechanisms can be provided to
        offer authentication, integrity, and privacy to the NFS
        version 4 protocol.  Kerberos V5 will be used as described
        in <xref target="RFC4121" /> to provide one security
        framework.
        With the use of RPCSEC_GSS,
        other mechanisms may also be specified and used for NFS
        version 4 security.
      </t>

      <t>
        To enable in-band security negotiation, the NFSv4
        protocol has added a new operation which provides the client
        with a method of querying the server about its policies regarding
        which security mechanisms must be used for access to the
        server's filesystem resources.  With this, the client can
        securely match the security mechanism that meets the policies
        specified at both the client and server.
      </t>
    </section>

    <section anchor="intro_procs" title="Procedure and Operation Structure">

      <t>
        A significant departure from the previous versions of the
        NFS protocol is the introduction of the COMPOUND procedure.
        For the NFSv4 protocol, there are two RPC procedures,
        NULL and COMPOUND.  The COMPOUND procedure is defined in
        terms of operations and these operations correspond more
        closely to the traditional NFS procedures.
      </t>

      <t>
        With the use of the COMPOUND procedure, the client is able
        to build simple or complex requests.  These COMPOUND requests
        allow for a reduction in the number of RPCs needed for logical
        filesystem operations.  For example, without previous contact
        with a server a client will be able to read data from a file
        in one request by combining LOOKUP, OPEN, and READ operations
        in a single COMPOUND RPC.  With previous versions of the NFS
        protocol, this type of single request was not possible.
      </t>

      <t>
        The model used for COMPOUND is very simple.  There is no
        logical OR or ANDing of operations.  The operations combined
        within a COMPOUND request are evaluated in order by the server.
        Once an operation returns a failing result, the evaluation
        ends and the results of all evaluated operations are returned
        to the client.
      </t>

      <t>
        The NFSv4 protocol continues to have the client refer
        to a file or directory at the server by a "filehandle".  The
        COMPOUND procedure has a method of passing a filehandle from
        one operation to another within the sequence of operations.
        There is a concept of a "current filehandle" and "saved
        filehandle".  Most operations use the "current filehandle"
        as the filesystem object to operate upon.  The "saved
        filehandle" is used as temporary filehandle storage within
        a COMPOUND procedure as well as an additional operand for
        certain operations.
      </t>
    </section>

    <section anchor="intro_fs_model" title="Filesystem Model">
      <t>
        The general filesystem model used for the NFSv4
        protocol is the same as previous versions.  The server
        filesystem is hierarchical with the regular files contained
        within being treated as opaque byte streams.  In a slight
        departure, file and directory names are encoded with UTF-8
        to deal with the basics of internationalization.
      </t>

      <t>
        The NFSv4 protocol does not require a separate
        protocol to provide for the initial mapping between path name
        and filehandle.  Instead of using the older MOUNT protocol
        for this mapping, the server provides a ROOT filehandle
        that represents the logical root or top of the filesystem
        tree provided by the server.  The server provides multiple
        filesystems by gluing them together with pseudo filesystems.
        These pseudo filesystems provide for potential gaps in the
        path names between real filesystems.
      </t>

      <section anchor="intro_fh_types" title="Filehandle Types">
        <t>
          In previous versions of the NFS protocol, the filehandle
          provided by the server was guaranteed to be valid or
          persistent for the lifetime of the filesystem object
          to which it referred.  For some server implementations,
          this persistence requirement has been difficult to meet.
          For the NFSv4 protocol, this requirement has been
          relaxed by introducing another type of filehandle, volatile.
          With persistent and volatile filehandle types, the server
          implementation can match the abilities of the filesystem at
          the server along with the operating environment.  The client
          will have knowledge of the type of filehandle being provided
          by the server and can be prepared to deal with the semantics
          of each.
        </t>
      </section>

      <section anchor="intro_attrs" title="Attribute Types">
        <t>
          The NFSv4 protocol has a rich and extensible
          file object attribute structure, which is divided
          into REQUIRED, RECOMMENDED, and named attributes
          (see <xref target="file_attributes"/>).
        </t>
        <t>
          Several (but not all) of the REQUIRED attributes
          are derived from the attributes of NFSv3 (see
          definition of the fattr3 data type in <xref
          target="RFC1813"/>). An example of a REQUIRED
          attribute is the file object's type (<xref
          target="attrdef_type"/>) so that regular files
          can be distinguished from directories (also known
          as folders in some operating environments) and
          other types of objects. REQUIRED attributes are
          discussed in <xref
          target="mandatory_attributes_intro"/>.
        </t>
        <t>
          An example of the RECOMMENDED attributes is
          an acl (<xref target="attrdef_acl" />).  This attribute defines an
          Access Control List (ACL) on a file object. An ACL provides
          file access control beyond the
          model used in NFSv3.   The ACL definition allows
          for specification of specific sets of permissions
          for individual users and groups.  In addition,
          ACL inheritance allows propagation of access
          permissions and restriction down a directory tree
          as file system objects are created.  RECOMMENDED
          attributes are discussed in <xref
          target="recommended_attributes_intro"/>.
        </t>
        <t>
          A named attribute is an opaque byte stream that is associated
          with a directory or file and referred to by a string name.
          Named attributes are meant to be used by client applications
          as a method to associate application-specific data with a
          regular file or directory.  NFSv4.1 modifies named attributes
          relative to NFSv4.0 by tightening the allowed operations in
          order to prevent the development of non-interoperable
          implementations.  Named attributes are discussed
          in <xref target="named_attributes_intro" />.
        </t>
      </section>
      <section anchor="intro_ms_namespace" title="Multi-server Namespace">
        <t>
          NFSv4 contains a number of features to allow
          implementation of namespaces that cross server boundaries
          and that allow and facilitate a non-disruptive transfer of
          support for individual file systems between servers.  They
          are all based upon attributes that allow one file system to
          specify alternate or new locations for that file system.
        </t>
        <t>
          These attributes may be used together with the concept
          of absent file systems, which provide specifications
          for additional locations but no actual file system
          content.  This allows a number of important facilities:
          <list style="symbols">
            <t>
              Location attributes may be used with absent file systems
              to implement referrals whereby one server may direct the
              client to a file system provided by another server.  This
              allows extensive multi-server namespaces to be constructed.
            </t>
            <t>
              Location attributes may be provided for present file systems
              to provide the locations of alternate file system instances
              or replicas to be used in the event that the current
              file system instance becomes unavailable.
            </t>
            <t>
              Location attributes may be provided when a previously
              present file system becomes absent.  This allows
              non-disruptive migration of file systems to alternate
              servers.
            </t>
          </list>
        </t>
      </section>
    </section>

    <section anchor="intro_open_op" title="OPEN and CLOSE">

      <t>
        The NFSv4 protocol introduces OPEN and CLOSE
        operations.  The OPEN operation provides a single point where
        file lookup, creation, and share semantics can be combined.
        The CLOSE operation also provides for the release of state
        accumulated by OPEN.
      </t>
    </section>

    <section anchor="intro_locking" title="File Locking">

      <t>
        With the NFSv4 protocol, the support for byte range
        file locking is part of the NFS protocol.  The file locking
        support is structured so that an RPC callback mechanism is
        not required.  This is a departure from the previous versions
        of the NFS file locking protocol, Network Lock Manager (NLM).
        The state associated with file locks is maintained at the
        server under a lease-based model.  The server defines a single
        lease period for all state held by a NFS client.  If the
        client does not renew its lease within the defined period,
        all state associated with the client's lease may be released
        by the server.  The client may renew its lease with use of
        the RENEW operation or implicitly by use of other operations
        (primarily READ).
      </t>
    </section>

    <section anchor="intro_delegs" title="Client Caching and Delegation">

      <t>
        The file, attribute, and directory caching for the NFSv4
        protocol is similar to previous versions.  Attributes and
        directory information are cached for a duration determined by
        the client.  At the end of a predefined timeout, the client
        will query the server to see if the related filesystem object
        has been updated.
      </t>

      <t>
        For file data, the client checks its cache validity when the
        file is opened.  A query is sent to the server to determine
        if the file has been changed.  Based on this information,
        the client determines if the data cache for the file should
        kept or released.  Also, when the file is closed, any modified
        data is written to the server.
      </t>

      <t>
        If an application wants to serialize access to file data, file
        locking of the file data ranges in question should be used.
      </t>

      <t>
        The major addition to NFSv4 in the area of caching is
        the ability of the server to delegate certain responsibilities
        to the client.  When the server grants a delegation for a
        file to a client, the client is guaranteed certain semantics
        with respect to the sharing of that file with other clients.
        At OPEN, the server may provide the client either a OPEN_DELEGATE_READ or
        OPEN_DELEGATE_WRITE delegation for the file.  If the client is granted
        a OPEN_DELEGATE_READ delegation, it is assured that no other client has
        the ability to write to the file for the duration of the
        delegation.  If the client is granted a OPEN_DELEGATE_WRITE delegation,
        the client is assured that no other client has read or write
        access to the file.
      </t>

      <t>
        Delegations can be recalled by the server.  If another
        client requests access to the file in such a way that the
        access conflicts with the granted delegation, the server is
        able to notify the initial client and recall the delegation.
        This requires that a callback path exist between the server and
        client.  If this callback path does not exist, then delegations
        cannot be granted.  The essence of a delegation is that it
        allows the client to locally service operations such as OPEN,
        CLOSE, LOCK, LOCKU, READ, or WRITE without immediate interaction
        with the server.
      </t>
    </section>
  </section>

  <section anchor="intro_gen_defs" title="General Definitions">

    <t>
      The following definitions are provided for the purpose of providing
      an appropriate context for the reader.

      <list style='hanging'>
        <t hangText="Byte:">
          In this document, a byte is an octet, i.e., a datum exactly 8
          bits in length.
        </t>
        <t hangText="Client:" anchor="client_def">
          The client is the entity that accesses the NFS server's
          resources.  The client may be an application that contains
          the logic to access the NFS server directly.  The client
          may also be the traditional operating system client that
          provides remote filesystem services for a set of applications.
        <vspace blankLines='1' />
          With reference to byte-range locking, the client is also the
          entity that maintains a set of locks on behalf of one or more
          applications.  This client is responsible for crash or failure
          recovery for those locks it manages.
        <vspace blankLines='1' />
          Note that multiple clients may share the same transport and
          connection and multiple clients may exist on the same network
          node.
        </t>

        <t hangText="Client ID:">
          A 64-bit quantity used as a unique, short-hand reference to
          a client supplied Verifier and ID.  The server is responsible
          for supplying the Client ID.
        </t>

        <t hangText="File System:">
          The file system is the collection of objects on a
          server that share the same fsid attribute
          (see <xref target="attrdef_fsid"/>).
        </t>

        <t hangText="Lease:">
          An interval of time defined by the server for which the
          client is irrevocably granted a lock.  At the end of a
          lease period the lock may be revoked if the lease has not
          been extended.  The lock must be revoked if a conflicting
          lock has been granted after the lease interval.
        <vspace blankLines='1' />
          All leases granted by a server have the same fixed
          interval.  Note that the fixed interval was chosen to
          alleviate the expense a server would have in maintaining
          state about variable length leases across server failures.
        </t>

        <t hangText="Lock:">
          The term "lock" is used to refer to both record (byte-range)
          locks as well as share reservations unless specifically
          stated otherwise.
        </t>

        <t hangText="Server:">
          The "Server" is the entity responsible for coordinating
          client access to a set of filesystems.
        </t>

        <t hangText="Stable Storage:">
          NFSv4 servers must be able to recover without data
          loss from multiple power failures (including cascading
          power failures, that is, several power failures in quick
          succession), operating system failures, and hardware failure
          of components other than the storage medium itself (for
          example, disk, nonvolatile RAM).
        <vspace blankLines='1' />
          Some examples of stable storage that are allowable for an
          NFS server include:

          <list style='format (%d)'>
            <t>
              Media commit of data, that is, the modified data
              has been successfully written to the disk media,
              for example, the disk platter.
            </t>

            <t>
              An immediate reply disk drive with battery-backed
              on-drive intermediate storage or uninterruptible
              power system (UPS).
            </t>

            <t>
              Server commit of data with battery-backed intermediate
              storage and recovery software.
            </t>

            <t>
              Cache commit with uninterruptible power system (UPS)
              and recovery software.
            </t>
          </list>
        </t>

        <t hangText="Stateid:">
          A stateid is a 128-bit quantity returned by a server that
          uniquely identifies the open and locking states provided by the
          server for a specific open-owner or lock-owner/open-owner pair for
          a specific file and type of lock.
        </t>

        <t hangText="Verifier:">
          A 64-bit quantity generated by the client that the server
          can use to determine if the client has restarted and lost
          all previous lock state.
        </t>
      </list>
    </t>
  </section>

  <section anchor="changes_since3530" title="Changes since RFC 3530">
    <t>
      The main changes from RFC 3530 <xref target="RFC3530" /> are:

      <list style='symbols'>
        <t>
          The XDR definition has been moved to a companion document
          <xref target="I-D.ietf-nfsv4-rfc3530bis-dot-x" />
        </t>
        <t>
          Updates for the latest IETF intellectual property statements
        </t>
        <t>
          There is a restructured and more complete explanation of
          multi-server namespace features.
        </t>
        <t>
          More liberal handling of internationalization for file names
          and user and group names, with the elimination of restrictions
          imposed by stringprep, with the recognition that rules for
          the forms of these name are the province of the receiving
          entity.
        </t>
        <t>
          Updating handling of domain names to reflect Internationalized Domain Names in Applications (IDNA) <xref target='RFC5891' />.
        </t>
        <t>
          Restructuring of string types to more appropriately reflect
          the reality of required string processing.
        </t>
        <t>
          The previously required LIPKEY and SPKM-3 security mechanisms
          have been removed.
        </t>
        <t>
          Some clarification on a client re-establishing callback
          information to the new server if state has been migrated.
        </t>
        <t>
          A third edge case was added for Courtesy locks and network
          partitions.
        </t>
        <t>
          The definition of stateid was strengthened.
        </t>
      </list>
    </t>
  </section>

  <section anchor="changes_since3010" title="Changes since RFC 3010">
    <t>
      This definition of the NFSv4 protocol replaces or
      obsoletes the definition present in <xref target="RFC3010" />.
      While portions of the two documents have remained the same,
      there have been substantive changes in others.  The changes made
      between <xref target="RFC3010" /> and this document represent
      implementation experience and further review of the protocol.
      While some modifications were made for ease of implementation
      or clarification, most updates represent errors or situations
      where the <xref target="RFC3010" /> definition were untenable.
    </t>

    <t>
      The following list is not all inclusive of all changes but
      presents some of the most notable changes or additions made:

      <list style='symbols'>
        <t>
          The state model has added an open_owner4 identifier.  This
          was done to accommodate Posix based clients and the model
          they use for file locking.  For Posix clients, an open_owner4
          would correspond to a file descriptor potentially shared
          amongst a set of processes and the lock_owner4 identifier
          would correspond to a process that is locking a file.
        </t>

        <t>
          Clarifications and error conditions were added for the
          handling of the owner and group attributes.  Since these
          attributes are string based (as opposed to the numeric
          uid/gid of previous versions of NFS), translations may not
          be available and hence the changes made.
        </t>

        <t>
          Clarifications for the ACL and mode attributes to address
          evaluation and partial support.
        </t>

        <t>
          For identifiers that are defined as XDR opaque, limits were
          set on their size.
        </t>

        <t>
          Added the mounted_on_fileid attribute to allow Posix clients
          to correctly construct local mounts.
        </t>

        <t>
          Modified the SETCLIENTID/SETCLIENTID_CONFIRM operations to
          deal correctly with confirmation details along with adding
          the ability to specify new client callback information.
          Also added clarification of the callback information itself.
        </t>

        <t>
          Added a new operation RELEASE_LOCKOWNER to enable notifying
          the server that a lock_owner4 will no longer be used by
          the client.
        </t>

        <t>
          RENEW operation changes to identify the client correctly
          and allow for additional error returns.
        </t>

        <t>
          Verify error return possibilities for all operations.
        </t>

        <t>
          Remove use of the pathname4 data type from LOOKUP and OPEN
          in favor of having the client construct a sequence of LOOKUP
          operations to achieve the same effect.
        </t>

        <t>
          Clarification of the internationalization issues and adoption
          of the new stringprep profile framework.
        </t>
      </list>
    </t>
  </section>

</section>
