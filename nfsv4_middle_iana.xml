<!-- Copyright (C) The IETF Trust (2009-2011) -->
<!-- Copyright (C) The Internet Society (2010-2011) -->
<section anchor="sec:iana" title="IANA Considerations">

<t>
This section uses terms that are defined in <xref target="RFC5226"/>.
</t>

 <section anchor="namedattributesiana" title="Named Attribute Definitions">
   <t>
     IANA will create a registry called the "NFSv4 Named Attribute Definitions Registry".
   </t>
   <t>
     The NFSv4 protocol supports the association of a file with zero or
     more named attributes.  The name space identifiers for these attributes
     are defined as string names.  The protocol does not define the
     specific assignment of the name space for these file attributes.
     An IANA registry will promote interoperability
     where common interests exist.  While application developers are
     allowed to define and use attributes as needed, they are encouraged
     to register the attributes with IANA.
   </t>
   <t>
     Such registered named attributes are presumed to apply to all minor
     versions of NFSv4, including those defined subsequently to the 
     registration.  Where the named attribute is intended to be 
     limited with regard to the minor versions for which they are not
     be used, the assignment in registry will clearly state the applicable
     limits.
   </t>
   <t>
     All assignments to the registry are made on a First Come First Served basis,
     per section 4.1 of <xref target="RFC5226"/>.

     The policy for each assignment is Specification Required, 
     per section 4.1 of <xref target="RFC5226"/>.
   </t>
   <t>
     Under the NFSv4 specification, the name of a named
     attribute can in theory be up to 2^32 - 1 bytes in
     length, but in practice NFSv4 clients and servers
     will be unable to a handle string that long. IANA
     should reject any assignment request with a named
     attribute that exceeds 128 UTF-8 characters. To give
     IESG the flexibility to set up bases of assignment of
     Experimental Use and Standards Action,
     the prefixes of "EXPE" and "STDS" are Reserved.
     The zero length named attribute name is Reserved.
   </t>
   <t>
     The prefix "PRIV" is allocated for Private Use.  A
     site that wants to make use of unregistered named
     attributes without risk of conflicting with an
     assignment in IANA's registry should use the prefix
     "PRIV" in all of its named attributes.

   </t>
   <t>
     Because some NFSv4 clients and servers have case insensitive
     semantics, the fifteen additional lower case and mixed case
     permutations of each of "EXPE", "PRIV", and "STDS", are Reserved (e.g.
     "expe", "expE", "exPe", etc. are Reserved).
     Similarly, IANA must not allow two assignments that would conflict
     if both named attributes were converted to a common case.
   </t>

   <t>
     The registry of named attributes is a list of assignments, each
     containing three fields for each assignment.

     <list style='numbers'>
       <t>
         A US-ASCII string name that is the actual name of
         the attribute. This name must be unique.  This
         string name can be 1 to 128 UTF-8 characters
         long.
       </t>

       <t>
         A reference to the specification of the named attribute.
          The reference can consume up to 256 bytes (or more if IANA
          permits).
       </t>

       <t>
         The point of contact of the registrant. The point
         of contact can consume up to 256 bytes (or more if IANA
         permits).
       </t>
     </list>
   </t>

  <section title="Initial Registry">
  <t>
   There is no initial registry.
  </t>
  </section>
  
  <section title="Updating Registrations">
  <t>
    The registrant is always permitted to update the point of contact
    field. To make any other change will require Expert Review or IESG
    Approval.
  </t>
  </section>
 </section>


  <section title="ONC RPC Network Identifiers (netids)">

    <t>
      <xref target="sec:sdts" /> discussed the r_netid field and
      the corresponding r_addr field of a clientaddr4 structure.
      The NFSv4 protocol depends on the syntax and semantics
      of these fields to effectively communicate callback information
      between client and server.  Therefore, an IANA registry has been
      created to include the values defined in this document and to
      allow for future expansion based on transport usage/availability.
      Additions to this ONC RPC Network Identifier registry must be
      done with the publication of an RFC.
    </t>

    <t>
      The initial values for this registry are as follows (some of this
      text is replicated from section 2.2 for clarity):
    </t>

    <t>
      The Network Identifier (or r_netid for short) is used to specify a
      transport protocol and associated universal address (or r_addr for
      short).  The syntax of the Network Identifier is a US-ASCII string.
      The initial definitions for r_netid are:

      <list style='hanging'>
        <t hangText='"tcp":'>
          TCP over IP version 4
        </t>

        <t hangText='"udp":'>
          UDP over IP version 4
        </t>

        <t hangText='"tcp6":'>
          TCP over IP version 6
        </t>

        <t hangText='"udp6":'>
          UDP over IP version 6
        </t>
      </list>
    </t>

    <t>
      Note: the '"' marks are used for delimiting the strings for this
      document and are not part of the Network Identifier string.
    </t>

    <t>
      For the "tcp" and "udp" Network Identifiers the Universal Address
      or r_addr (for IPv4) is a US-ASCII string and is of the form:

      <figure>
        <artwork>
h1.h2.h3.h4.p1.p2
        </artwork>
      </figure>
    </t>

    <t>
      The prefix, "h1.h2.h3.h4", is the standard textual form for
      representing an IPv4 address, which is always four octets long.
      Assuming big-endian ordering, h1, h2, h3, and h4, are respectively,
      the first through fourth octets each converted to ASCII-decimal.
      Assuming big-endian ordering, p1 and p2 are, respectively, the first
      and second octets each converted to ASCII-decimal.  For example, if a
      host, in big-endian order, has an address of 0x0A010307 and
      there is a service listening on, in big endian order, port 0x020F
      (decimal 527), then complete universal address is "10.1.3.7.2.15".
    </t>

    <t>
      For the "tcp6" and "udp6" Network Identifiers the Universal Address
      or r_addr (for IPv6) is a US-ASCII string and is of the form:

      <figure>
        <artwork>
x1:x2:x3:x4:x5:x6:x7:x8.p1.p2
        </artwork>
      </figure>
    </t>

    <t>
      The suffix "p1.p2" is the service port, and is computed the same way
      as with universal addresses for "tcp" and "udp".  The prefix,
      "x1:x2:x3:x4:x5:x6:x7:x8", is the standard textual form for
      representing an IPv6 address as defined in Section 2.2 of
      <xref target="RFC2373" />.  Additionally, the two alternative forms specified in
      Section 2.2 of <xref target="RFC2373" /> are also acceptable.
    </t>

  <section title="Initial Registry">
  <t>
   There is no initial registry.
  </t>
  </section>
  
  <section title="Updating Registrations">
  <t>
    The registrant is always permitted to update the point of contact
    field. To make any other change will require Expert Review or IESG
    Approval.
  </t>
  </section>
 </section>
</section>
