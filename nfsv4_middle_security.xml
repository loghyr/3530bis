<!-- Copyright (C) The IETF Trust (2009-2014) -->
<!-- Copyright (C) The Internet Society (2010-2014) -->
<section anchor="sec:security" title="Security Considerations">
  <t>
    NFS has historically used a model where, from an authentication
    perspective, the client was the entire machine, or at least the
    source IP address of the machine.  The NFS server relied on the NFS
    client to make the proper authentication of the end-user.  The NFS
    server in turn shared its files only to specific clients, as
    identified by the client's source IP address.  Given this model, the
    AUTH_SYS RPC security flavor simply identified the end-user using the
    client to the NFS server.  When processing NFS responses, the client
    ensured that the responses came from the same IP address and port
    number that the request was sent to.  While such a model is easy to
    implement and simple to deploy and use, it is certainly not a safe
    model.  Thus, NFSv4 mandates that implementations support a security
    model that uses end to end authentication, where an end-user on a
    client mutually authenticates (via cryptographic schemes that do not
    expose passwords or keys in the clear on the network) to a
    principal on an NFS server.  Consideration should also be given
    to the integrity and privacy of NFS requests and responses.
    The issues of end to end mutual authentication, integrity,
    and privacy are discussed as part of <xref target="sec:rpc_flavors" />.
  </t>

  <t>
    When an NFSv4 mandated security model is used and a security principal or
    an NFSv4 name in user@dns_domain form needs to be translated to or from a
    local representation as described in
    <xref target='sec:fattr:owner_group' />, the translation SHOULD be
    done in a secure manner that preserves the integrity of the translation.  For
    communication with a name service such as LDAP (<xref target='RFC4511' />),
    this means employing a security service that uses authentication
    and data integrity. Kerberos and Transport Layer Security (TLS) (<xref target='RFC5246' />) are examples
    of such a security service.
  </t>

  <t>
    Note that being REQUIRED to implement does not mean REQUIRED to use;
    AUTH_SYS can be used by NFSv4 clients and servers.  However,
    AUTH_SYS is merely an OPTIONAL security flavor in NFSv4, and so
    interoperability via AUTH_SYS is not assured.
  </t>

  <t>
    For reasons of reduced administration overhead, better performance
    and/or reduction of CPU utilization, users of NFSv4
    implementations may choose to not use security mechanisms that enable
    integrity protection on each remote procedure call and response. The
    use of mechanisms without integrity leaves the customer vulnerable to
    an attacker in between the NFS client and server that modifies the
    RPC request and/or the response. While implementations are free
    to provide the option to use weaker security mechanisms, there
    are two operations in particular that warrant the implementation
    overriding user choices.
  </t>

  <t>
    The first such operation is SECINFO.  It is recommended that the
    client issue the SECINFO call such that it is protected with a
    security flavor that has integrity protection, such as RPCSEC_GSS
    with a security triple that uses either rpc_gss_svc_integrity or
    rpc_gss_svc_privacy (rpc_gss_svc_privacy includes integrity
    protection) service. Without integrity protection encapsulating
    SECINFO and therefore its results, an attacker in the middle could
    modify results such that the client might select a weaker algorithm
    in the set allowed by server, making the client and/or server
    vulnerable to further attacks.
  </t>

  <t>
    The second operation that SHOULD use integrity protection
    is any GETATTR for the fs_locations attribute. The attack has two
    steps.  First the attacker modifies the unprotected results of
    some operation to return NFS4ERR_MOVED. Second, when the client
    follows up with a GETATTR for the fs_locations attribute, the
    attacker modifies the results to cause the client to migrate its
    traffic to a server controlled by the attacker.
  </t>

  <t>
    Because the operations SETCLIENTID/SETCLIENTID_CONFIRM are
    responsible for the release of client state, it is imperative
    that the principal used for these operations is checked against
    and match with the previous use of these operations.  See
     <xref target="ss:fl:client_id" /> for further discussion.
  </t>

  <t>
    Unicode in the form of UTF-8 is used for file
    component names (i.e., both directory and file components),
    as well as the owner and owner_group
    attributes; other character sets may also be allowed for
    file component names.  String processing
    (e.g., Unicode normalization) raises security concerns for
    string comparison - see Sections
    <xref target="sec:fattr:owner_group" format="counter" /> and
    <xref target="sec:i18n" format="counter" /> for further
    discussion and see <xref target='RFC6943' /> for related identifier comparison
    security considerations.  File component
    names are identifiers with respect to the identifier comparison
    discussion in <xref target='RFC6943' /> because they are used to identify the
    objects to which ACLs are applied, see <xref target='sec:acl' />.
  </t>
</section>
